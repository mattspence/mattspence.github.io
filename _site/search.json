[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts. Never going to happen."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Matt Spence",
    "section": "",
    "text": "Hello! My name is Matt Spence, and I am a senior advisor at the US Census Bureau working on special population statistics and disclosure avoidance. \nFrom 2016 – 2021, I was the chief of the Foreign Born Population Branch, which collects and publishes data on people born outside the United States.\nBefore that, I was the program lead for the Education Demographic, Geographic, and Economic Statistics (EDGE) program, which provides demographic, social, and economic characteristics on schoolchildren and their parents, and I was the director of the CCD Non-Fiscal Survey, which gathers information on all schools and school districts in the U.S. I’ve also worked in the Governments Division of the Census Bureau.\nBefore I joined the Census Bureau, I was a Ph.D. candidate in political science at UCLA. My dissertation research was on distributive politics: specifically, on the incidence and patterns of political manipulation of local public goods in India.\n\nYou can email me here (matt at mattspence dot com).\nMy wife, daughters, and I currently live in the DC metro area, and we’re doing our best to explore it. Let me know if we should check somewhere out!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello! My name is Matt Spence, and I am the chief of the Foreign Born Population Branch at the US Census Bureau.\nPreviously, I was the program lead for the Education Demographic, Geographic, and Economic Statistics (EDGE) program, which provides demographic, social, and economic characteristics on schoolchildren and their parents, and I was the director of the CCD Non-Fiscal Survey, which gathers information on all schools and school districts in the U.S. I’ve also worked in the Governments Division of the Census Bureau. Before that, I was a Ph.D. candidate in political science at UCLA. My dissertation research was on distributive politics: specifically, on the incidence and patterns of political manipulation of local public goods in India.\nMy resume is here. You can email me here .\nMy wife, daughters, and I currently live in the DC metro area, and we’re doing our best to explore it. Let me know if we should check somewhere out!"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Opening Day\n\n\n\n\n\n\n\nbaseball\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nApr 9, 2015\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2015/04/opening-day/index.html",
    "href": "posts/2015/04/opening-day/index.html",
    "title": "Opening Day",
    "section": "",
    "text": "In honor of Opening Day (and the Nats’ loss), I wanted to see which teams have had the most success on opening day.\nIt’s…the Mets (?)\n\n\nCode\nimport os, requests, zipfile, io\nfrom IPython.display import HTML, Markdown\nfrom itables import show\n\nDOWNLOADFROMRS = False\nif not os.path.exists(\"gl\"):\n    os.makedirs(\"gl\")\nif DOWNLOADFROMRS:\n    r = requests.get(\"https://www.retrosheet.org/CurrentNames.csv\")\n    with open(\"gl/CurrentNames.csv\",\"w\") as f:\n        f.write(\"current_team_id,hist_franchise_id,league,division,location,nickname,alt_nickname,first_used,last_used,city,state\\r\\n\")\n        f.write(r.text)\n\n\"\"\"\nFrom https://www.retrosheet.org/Nickname.htm:\nThe fields are:\n\nCurrent franchise ID\nFranchise ID (may the same as current one) for earlier data\nLeague\nDivision (blank before divisional play)\nLocation name (e.g. Brooklyn, Texas)\nNickname\nAlternate nicknames (blank if none for the period)\nDate of the first game with this combination\nDate of the last game with combination (blank if current one)\nCity\nState\n\"\"\"\n\nif DOWNLOADFROMRS:\n    r = requests.get(\"https://www.retrosheet.org/gamelogs/glfields.txt\")\n    with open(\"gl/glfields.txt\",\"w\") as f:\n        f.write(r.text)\n\nif DOWNLOADFROMRS:\n    for y in range(1980,2015):\n        zip_file_url = f\"https://www.retrosheet.org/gamelogs/gl{y}.zip\"\n        r = requests.get(zip_file_url)\n        z = zipfile.ZipFile(io.BytesIO(r.content))\n        z.extractall(\"gl\")\n\nimport pandas as pd\n\nfields = ['date','visit_team_id','visit_team_league','visit_game_number','home_team_id','home_team_league','home_game_number','visit_final_score','home_final_score']\ncols = [0,3,4,5,6,7,8,9,10]\n\nnamefields = ['current_team_id','hist_franchise_id','league','division','location','nickname','alt_nickname','first_used','last_used','city','state']\n\ndef assign_outcome(row):\n    if row.final_score>row.opponent_final_score:\n        return 'W'\n    elif row.final_score<row.opponent_final_score:\n        return 'L'\n\ndef read_in_data(year):\n    dat = pd.read_csv('gl/GL{}.txt'.format(year), header=None,names=fields, usecols=cols, parse_dates=['date'])\n    v = dat.loc[dat.visit_game_number==1,].rename(columns=lambda x: x.replace('visit_','')).rename(columns=lambda x: x.replace('home_','opponent_'))\n    h = dat.loc[dat.home_game_number==1,].rename(columns=lambda x: x.replace('home_','')).rename(columns=lambda x: x.replace('visit_','opponent_'))\n    games = pd.concat([v,h], ignore_index=True)\n    games['outcome'] = games.apply(assign_outcome,axis=1)\n    games['season'] = year\n    return games\n\nteamnames = pd.read_csv('gl/CurrentNames.csv', parse_dates=['first_used','last_used']) \n\ndf = pd.DataFrame()\nfor year in range(1980,2015):\n    g = read_in_data(year)\n    df = pd.concat([df,g], ignore_index=True)\n\nteamsgrouped = df.groupby('team_id')\n\npct = teamsgrouped.apply(lambda x: x.outcome.value_counts()/x.outcome.size).round(3)*100\npct = pct.unstack(1)\npct = pct.sort_values('W', ascending=False) ## decent answer here, but let's merge in team names\n\npctteamids = list(pct.index.values)\npctteams = teamnames[teamnames.hist_franchise_id.isin(pctteamids)].sort_values('last_used').drop_duplicates(subset='hist_franchise_id',keep=\"last\")\n\nfinaltable = pct.merge(pctteams, left_index=True, right_on='hist_franchise_id', how=\"left\").reset_index().assign(Team = lambda x: x['location'] + \" \" + x['nickname']).rename(columns={'W':'Wins','L':'Losses'})[['Team','Wins','Losses']]\n\nHTML(finaltable.to_html(index=False))  # alternative to using the itables package\n# with pd.option_context(\"display.float_format\", \"{:,.1f}%\".format):\n#     show(finaltable, dom=\"lrtp\", lengthMenu = [5,10,len(finaltable)]) #paging=False to show full table\n\n\n\n\n\n  \n    \n      Team\n      Wins\n      Losses\n    \n  \n  \n    \n      New York Mets\n      71.4\n      28.6\n    \n    \n      Baltimore Orioles\n      65.7\n      34.3\n    \n    \n      Chicago White Sox\n      65.7\n      34.3\n    \n    \n      Los Angeles Angels\n      61.1\n      38.9\n    \n    \n      Seattle Mariners\n      60.0\n      40.0\n    \n    \n      Arizona Diamondbacks\n      58.8\n      41.2\n    \n    \n      Atlanta Braves\n      57.1\n      42.9\n    \n    \n      Los Angeles Dodgers\n      54.3\n      45.7\n    \n    \n      San Francisco Giants\n      54.3\n      45.7\n    \n    \n      New York Yankees\n      54.3\n      45.7\n    \n    \n      Cincinnati Reds\n      54.3\n      42.9\n    \n    \n      Milwaukee Brewers\n      54.3\n      42.9\n    \n    \n      Detroit Tigers\n      54.3\n      45.7\n    \n    \n      Tampa Bay Rays\n      52.9\n      47.1\n    \n    \n      Florida Marlins\n      52.6\n      47.4\n    \n    \n      Toronto Blue Jays\n      51.4\n      48.6\n    \n    \n      St. Louis Cardinals\n      51.4\n      48.6\n    \n    \n      Colorado Rockies\n      50.0\n      50.0\n    \n    \n      Texas Rangers\n      48.6\n      51.4\n    \n    \n      Pittsburgh Pirates\n      48.6\n      51.4\n    \n    \n      Montreal Expos\n      48.0\n      52.0\n    \n    \n      California Angels\n      47.1\n      52.9\n    \n    \n      Chicago Cubs\n      45.7\n      54.3\n    \n    \n      Boston Red Sox\n      45.7\n      54.3\n    \n    \n      Houston Astros\n      42.9\n      57.1\n    \n    \n      Washington Nationals\n      40.0\n      60.0\n    \n    \n      San Diego Padres\n      40.0\n      60.0\n    \n    \n      Minnesota Twins\n      40.0\n      60.0\n    \n    \n      Cleveland Indians\n      40.0\n      60.0\n    \n    \n      Philadelphia Phillies\n      37.1\n      62.9\n    \n    \n      Oakland Athletics\n      37.1\n      62.9\n    \n    \n      Miami Marlins\n      33.3\n      66.7\n    \n    \n      Kansas City Royals\n      28.6\n      71.4\n    \n  \n\nTable 1:  Opening Day Records, 1980 – 2014 \n\n\nHere’s how I did it:\nI downloaded1 game logs from 1980 – 2014 from RetroSheet and wrote the following script to analyze them. The key was changing the “dyadic” structure of the raw game logs (one row contains information about the two teams playing the game) into one that had one row for each team. I did this in the read_in_data function:\n\ndef read_in_data(year):\n    dat = pd.read_csv('gl/GL{}.txt'.format(year), header=None,names=fields, usecols=cols, parse_dates=['date'])\n    v = dat.loc[dat.visit_game_number==1,].rename(columns=lambda x: x.replace('visit_','')).rename(columns=lambda x: x.replace('home_','opponent_'))\n    h = dat.loc[dat.home_game_number==1,].rename(columns=lambda x: x.replace('home_','')).rename(columns=lambda x: x.replace('visit_','opponent_'))\n    games = pd.concat([v,h], ignore_index=True)\n    games['outcome'] = games.apply(assign_outcome,axis=1)\n    games['season'] = year\n    return games\n\nHere’s an example of one year’s worth of gamelog data once it’s been run through read_in_data. 2014 was a bit of an odd season, since the Dodgers and the Diamondbacks started their seasons on March 22 by playing three exhibition games in Syndey, Australia. Each team went on to be another team’s opening day opponent – the Dodgers faced the Padres and the Diamondbacks went up against the Giants.\n\n\n\n\n  \n    \n      date\n      team_id\n      game_number\n      opponent_team_id\n      opponent_game_number\n      final_score\n      opponent_final_score\n      outcome\n    \n  \n  \n    \n      2014-03-22\n      LAN\n      1\n      ARI\n      1\n      3\n      1\n      W\n    \n    \n      2014-03-22\n      ARI\n      1\n      LAN\n      1\n      1\n      3\n      L\n    \n    \n      2014-03-30\n      SDN\n      1\n      LAN\n      3\n      3\n      1\n      W\n    \n    \n      2014-03-31\n      MIA\n      1\n      COL\n      1\n      10\n      1\n      W\n    \n    \n      2014-03-31\n      CIN\n      1\n      SLN\n      1\n      0\n      1\n      L\n    \n    \n      2014-03-31\n      TEX\n      1\n      PHI\n      1\n      10\n      14\n      L\n    \n    \n      2014-03-31\n      TBA\n      1\n      TOR\n      1\n      9\n      2\n      W\n    \n    \n      2014-03-31\n      OAK\n      1\n      CLE\n      1\n      0\n      2\n      L\n    \n    \n      2014-03-31\n      DET\n      1\n      KCA\n      1\n      4\n      3\n      W\n    \n    \n      2014-03-31\n      CHA\n      1\n      MIN\n      1\n      5\n      3\n      W\n    \n    \n      2014-03-31\n      BAL\n      1\n      BOS\n      1\n      2\n      1\n      W\n    \n    \n      2014-03-31\n      ANA\n      1\n      SEA\n      1\n      3\n      10\n      L\n    \n    \n      2014-03-31\n      PIT\n      1\n      CHN\n      1\n      1\n      0\n      W\n    \n    \n      2014-03-31\n      CHN\n      1\n      PIT\n      1\n      0\n      1\n      L\n    \n    \n      2014-03-31\n      WAS\n      1\n      NYN\n      1\n      9\n      7\n      W\n    \n    \n      2014-03-31\n      ATL\n      1\n      MIL\n      1\n      0\n      2\n      L\n    \n    \n      2014-03-31\n      COL\n      1\n      MIA\n      1\n      1\n      10\n      L\n    \n    \n      2014-03-31\n      SLN\n      1\n      CIN\n      1\n      1\n      0\n      W\n    \n    \n      2014-03-31\n      SFN\n      1\n      ARI\n      3\n      9\n      8\n      W\n    \n    \n      2014-03-31\n      PHI\n      1\n      TEX\n      1\n      14\n      10\n      W\n    \n    \n      2014-03-31\n      TOR\n      1\n      TBA\n      1\n      2\n      9\n      L\n    \n    \n      2014-03-31\n      CLE\n      1\n      OAK\n      1\n      2\n      0\n      W\n    \n    \n      2014-03-31\n      KCA\n      1\n      DET\n      1\n      3\n      4\n      L\n    \n    \n      2014-03-31\n      MIN\n      1\n      CHA\n      1\n      3\n      5\n      L\n    \n    \n      2014-03-31\n      BOS\n      1\n      BAL\n      1\n      1\n      2\n      L\n    \n    \n      2014-03-31\n      SEA\n      1\n      ANA\n      1\n      10\n      3\n      W\n    \n    \n      2014-03-31\n      MIL\n      1\n      ATL\n      1\n      2\n      0\n      W\n    \n    \n      2014-03-31\n      NYN\n      1\n      WAS\n      1\n      7\n      9\n      L\n    \n    \n      2014-04-01\n      NYA\n      1\n      HOU\n      1\n      2\n      6\n      L\n    \n    \n      2014-04-01\n      HOU\n      1\n      NYA\n      1\n      6\n      2\n      W\n    \n  \n\n\n\nThe results table includes two teams that have renamed themselves (the Angels and the Marlins), and one that moved and changed names (Expos). I’d like to update my script to deal with these, but should I really lump the Expos in with the Nats?\nAlso, I was relieved to see the Dodgers and the Giants were tied, at least.\n\n\n\n\n\n\nFootnotes\n\n\nI did this manually back in 2015, but as I was porting this to the new site, I wrote a script to automatically download and unzip the files.↩︎"
  }
]